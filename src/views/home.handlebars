<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="/styles/style.css">
  <title>Productos</title>
</head>
<body>
  <h1>Productos</h1>
  <ul>
    {{#each products}}
      <li>
        <h2>{{this.title}}</h2>
        <p>{{this.description}}</p>
        <p>Precio: ${{this.price}}</p>
        <p>Categoría: {{this.category}}</p>
        <a href="/products/{{this._id}}">Ver más</a>
        <button onclick="addToCart('{{this._id}}')">Agregar al carrito</button>
        <button onclick="removeFromCart('{{this._id}}')" style="display:none;">Eliminar del carrito</button>
        <p class="cart-message" style="display:none;">Producto agregado al carrito</p>
      </li>
    {{/each}}
  </ul>

  <div>
    <!-- Paginación (sin cambios) -->
    {{#if hasPrevPage}}
      <a href="/products?page={{prevPage}}&limit={{limit}}&sort={{sort}}&query={{query}}">Página Anterior</a>
    {{else}}
      <span>Página Anterior</span>
    {{/if}}

    <div>
      {{#each pages}}
        {{#ifEquals ../page this}}
          <strong>{{this}}</strong>
        {{else}}
          <a href="/products?page={{this}}&limit={{../limit}}&sort={{../sort}}&query={{../query}}">{{this}}</a>
        {{/ifEquals}}
      {{/each}}
    </div>

    {{#if hasNextPage}}
      <a href="/products?page={{nextPage}}&limit={{limit}}&sort={{sort}}&query={{query}}">Página Siguiente</a>
    {{else}}
      <span>Página Siguiente</span>
    {{/if}}
  </div>

<script>
  function addToCart(productId) {
    fetch('/api/carts', {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        productId: productId,
        quantity: 1
      })
    }).then(response => response.json())
      .then(data => {
        console.log('Producto agregado al carrito:', data);

        // Esperamos a que los elementos estén disponibles en el DOM
        const productItem = document.querySelector(`[data-product-id="${productId}"]`);

        if (productItem) {
          // Mostrar el mensaje y el botón de eliminar
          productItem.querySelector('.cart-message').style.display = 'block';
          productItem.querySelector('.add-to-cart').style.display = 'none';  // Ocultar el botón de agregar
          productItem.querySelector('.remove-from-cart').style.display = 'inline';  // Mostrar el botón de eliminar
        }
      })
      .catch(error => console.error('Error:', error));
  }

  function removeFromCart(productId) {
    fetch('/api/carts', {
      method: 'DELETE',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ productId: productId })
    }).then(response => response.json())
      .then(data => {
        console.log('Producto eliminado del carrito:', data);

        // Esperamos a que los elementos estén disponibles en el DOM
        const productItem = document.querySelector(`[data-product-id="${productId}"]`);

        if (productItem) {
          // Ocultar el mensaje y el botón de eliminar
          productItem.querySelector('.cart-message').style.display = 'none';
          productItem.querySelector('.add-to-cart').style.display = 'inline';  // Mostrar el botón de agregar
          productItem.querySelector('.remove-from-cart').style.display = 'none';  // Ocultar el botón de eliminar
        }
      })
      .catch(error => console.error('Error:', error));
  }
</script>

</body>
</html>
